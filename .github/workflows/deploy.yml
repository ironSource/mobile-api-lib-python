name: Python Deploy

on:
  release:
    types: ["published"]
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  GH_TOKEN: ${{secrets.PAT_TOKEN}}
  
jobs:

  integration_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate Short SHA and Unique runner id
        id: vars
        run: |
          echo ::set-output name=sha_short::${GITHUB_SHA::7}
          echo ::set-output name=uuid::${{ env.BRANCH_NAME }}:${GITHUB_SHA::7}:${GITHUB_RUN_ID}
      - name: Trigger Integration tests remote task
        id: integration_test_trigger
        timeout-minutes: 20
        uses: ironSource/action-trigger-workflow@main
        with:
          owner: ${{ secrets.TRIGGERED_OWNER }}
          repo: ${{ secrets.TRIGGERED_REPO }}
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow_file_name: api-tests-py.yml
          job_uuid: "${{ steps.vars.outputs.uuid }}"
          monitored_job_name: test
          inputs: '{ "repository": "${{github.repository}}", "branch_name": "${{ env.BRANCH_NAME }}", "user": "${{github.actor}}", "job_uuid": "${{ steps.vars.outputs.uuid }}"}'

      - name: Print Integration Tests results
        if: failure()
        run: |
            echo Checking log for workflow ${{steps.integration_test_trigger.outputs.workflow_id}} job ${{steps.integration_test_trigger.outputs.job_id}}
            gh --repo ${{ secrets.TRIGGERED_OWNER }}/${{ secrets.TRIGGERED_REPO }} run view --job ${{steps.integration_test_trigger.outputs.job_id}} --log
        
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]
    needs: integration_test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel build
        pip install -r dev_requirements.txt 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run ðŸ“¦ creation
      run: |
        python -m build --sdist
    - name: Publish ðŸ“¦ to Jfrog
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.JFROG_PASSWORD }}
        user:  ${{ secrets.JFROG_USER }}
        repository_url: https://ironsrc.jfrog.io/artifactory/api/pypi/pypi-local-release-py3
    - name: Archive package
      uses: actions/upload-artifact@v2
      with:
        name: ironsource-api
        path: dist